(defun y (g)
  ((lambda (f) (funcall f f))
   (lambda (f) (funcall g (lambda (&rest x) (apply (funcall f f) x))))))

;;(defglobal tasknum 0)
;;(declaim (fixnum tasknum))

(defun gen-parallel-async ()
  ((lambda (wrap)
     (let ((list)
           (tasks nil)
           (singal)
           (tasknum (list 0)))
       (sb-thread:make-thread
        (y (lambda (fn) (lambda ()
                     (setf list (nconc list tasks))
                     (setf tasks nil)
                     (let ((task (car list)))
                       (if (not (eq task nil))
                           (progn (setf list (cdr list))
                                  (print "go")
                                  (atomic-decf (car tasknum))
                                  (funcall
                                   (funcall wrap task)))
                           (progn (print "sil")))
                       (cond ((equal singal :end) nil)
                             (t (progn (if (equal (car tasknum) 0)
                                           (sleep 1)
                                           (sleep 0))
                                       (funcall fn)))))))))
       (values (list (cons :add (lambda (&rest task)
                                  (atomic-incf (car tasknum))
                                  (funcall (y (lambda (lock) (lambda ()
                                                          (if (eq tasks nil)
                                                              (progn (setf tasks (append tasks task)))
                                                              (progn
                                                                (funcall lock)))))))
                                  ))
                     (cons :end (lambda () (setf singal :end)))))))
   (lambda (fn)
     (lambda (&rest x)
       (handler-case (apply fn x)
         (error (condition) (print condition)))))))


;; (defparameter async (gen-parallel-async))
;; (funcall (cdr (assoc :end async)))
;; (times 3 (lambda (x) (times 2 (lambda (i) (funcall (cdr (assoc :add async)) (lambda () (progn (format t "~A : ~A~%" x i) (atomic-incf acc))))))))
(defun times (max f)
  (do ((i 0 (+ i 1)))
      ((>= i max) 'done)
    (funcall f i)))
;;(times 6 (funcall (cdr (assoc :add async)) (lambda () (format t "~%~A~%" i))))
